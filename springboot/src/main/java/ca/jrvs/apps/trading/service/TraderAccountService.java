package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class TraderAccountService {

    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao, SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount
     *
     * @param trader that cannot be null. All fields except for id (auto-generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not nulll
     */
    public TraderAccountView createTraderAndAccount(Trader trader){
        checkTrader(trader);
        trader.setID(traderDao.save(trader).getID());
        Account newAccount = new Account();
        newAccount.setAmount(0d);
        newAccount.setTrader_id(trader.getID());
        newAccount.setID(accountDao.save(newAccount).getID());
        TraderAccountView view = new TraderAccountView();
        view.setTrader(trader);
        view.setAccount(newAccount);
        return view;
    }

    private void checkTrader(Trader trader) {
        if (trader == null) throw new IllegalArgumentException("Trader can't be null");
        if (trader.getEmail() == null) throw new IllegalArgumentException("Trader's email can't be null");
        if (trader.getCountry() == null) throw new IllegalArgumentException("Trader's country can't be null");
        if (trader.getDob() == null) throw new IllegalArgumentException("Trader's dob can't be null");
        if (trader.getFirst_name() == null) throw new IllegalArgumentException("Trader's first name can't be null");
        if (trader.getLast_name() == null) throw new IllegalArgumentException("Trader;s last name can't be null");
    }

    /**
     * A trader can be deleted if has no open position and 0 cash balance
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderByID(Integer traderId){
        checkTraderID(traderId);
        List<Account> accounts = accountDao.findByColumn("trader_id", traderId);
        checkAccountDeletable(accounts);
        Account account = accounts.get(0);
        List<Position> positions = positionDao.findByColumn("account_id", account.getID());
        checkPositionClosed(positions);

        securityOrderDao.deleteByColumn("account_id", account.getID());
        accountDao.deleteById(traderId);
        traderDao.deleteById(traderId);
    }

    private void checkPositionClosed(List<Position> posiitons) {
        if (!isPositionsClosed(posiitons)) {
            throw new IllegalArgumentException("Posiiton are open for the account");
        }
    }
    private void checkTraderID(Integer traderId) {
        if (traderId == null || !traderDao.existsById(traderId)) {
            throw new IllegalArgumentException("trader id is null");
        }
    }

    private void checkAccounts(List<Account> accounts) {
        if (accounts.size() == 0) {
            throw new IllegalArgumentException("No account exists for this trader");
        }

    }

    private void checkAccountDeletable(List<Account> accounts) {
        checkAccounts(accounts);
        if (accounts.get(0).getAmount() != 0) {
            throw new IllegalArgumentException("Account has 0 amount");
        }
    }

    private boolean isPositionsClosed(List<Position> positions) {
        for (Position position: positions) {
            if (position.getPosition() != 0) {
                return false;
            }
        }
        return true;
    }

    private void checkFund(Double fund) {
        if (fund <= 0) {
            throw new IllegalArgumentException("Fund can't be less than or equal to 0");
        }
    }

    /**
     * Deposit fund to an account by  trader ID
     *
     * @param traderId trader ID
     * @param fund must be greater than 0
     * @return updated account
     * @throws IllegalArgumentException if traderID is null or not found,
     *                                  fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund){
        checkTraderID(traderId);
        checkFund(fund);

        List<Account> accounts = accountDao.findByColumn("trader_id", traderId);
        checkAccounts(accounts);
        Account account = accounts.get(0);

        return accountDao.updateAmountById(account, fund);
    }

    /**
     * Withdraw fund to an account by  trader ID
     *
     * @param traderId trader ID
     * @param fund can't be 0
     * @return updated account
     * @throws IllegalArgumentException if traderID is null or not found,
     *                                  fund is less or equal to 0, and insufficient balance
     */
    public Account withdraw(Integer traderId, Double fund){
        checkTraderID(traderId);
        checkFund(fund);

        List<Account> accounts = accountDao.findByColumn("trader_id", traderId);
        checkAccounts(accounts);
        Account account = accounts.get(0);

        checkAccountInsufficientFund(account, fund);
        return accountDao.updateAmountById(account, fund * -1);
    }


    private void checkAccountInsufficientFund(Account account, Double fund) {
        if (account.getAmount() < fund) {
            throw new IllegalArgumentException("Insufficient funds in the Account");
        }
    }
}
